// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	crv1 "github.com/useurmind/certbird/k8s-controller/pkg/apis/cr/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCertRequests implements CertRequestInterface
type FakeCertRequests struct {
	Fake *FakeCertbirdV1
	ns   string
}

var certrequestsResource = schema.GroupVersionResource{Group: "certbird.useurmind.github.com", Version: "v1", Resource: "certrequests"}

var certrequestsKind = schema.GroupVersionKind{Group: "certbird.useurmind.github.com", Version: "v1", Kind: "CertRequest"}

// Get takes name of the certRequest, and returns the corresponding certRequest object, and an error if there is any.
func (c *FakeCertRequests) Get(ctx context.Context, name string, options v1.GetOptions) (result *crv1.CertRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(certrequestsResource, c.ns, name), &crv1.CertRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*crv1.CertRequest), err
}

// List takes label and field selectors, and returns the list of CertRequests that match those selectors.
func (c *FakeCertRequests) List(ctx context.Context, opts v1.ListOptions) (result *crv1.CertRequestList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(certrequestsResource, certrequestsKind, c.ns, opts), &crv1.CertRequestList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &crv1.CertRequestList{ListMeta: obj.(*crv1.CertRequestList).ListMeta}
	for _, item := range obj.(*crv1.CertRequestList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested certRequests.
func (c *FakeCertRequests) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(certrequestsResource, c.ns, opts))

}

// Create takes the representation of a certRequest and creates it.  Returns the server's representation of the certRequest, and an error, if there is any.
func (c *FakeCertRequests) Create(ctx context.Context, certRequest *crv1.CertRequest, opts v1.CreateOptions) (result *crv1.CertRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(certrequestsResource, c.ns, certRequest), &crv1.CertRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*crv1.CertRequest), err
}

// Update takes the representation of a certRequest and updates it. Returns the server's representation of the certRequest, and an error, if there is any.
func (c *FakeCertRequests) Update(ctx context.Context, certRequest *crv1.CertRequest, opts v1.UpdateOptions) (result *crv1.CertRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(certrequestsResource, c.ns, certRequest), &crv1.CertRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*crv1.CertRequest), err
}

// Delete takes name of the certRequest and deletes it. Returns an error if one occurs.
func (c *FakeCertRequests) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(certrequestsResource, c.ns, name), &crv1.CertRequest{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCertRequests) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(certrequestsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &crv1.CertRequestList{})
	return err
}

// Patch applies the patch and returns the patched certRequest.
func (c *FakeCertRequests) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *crv1.CertRequest, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(certrequestsResource, c.ns, name, pt, data, subresources...), &crv1.CertRequest{})

	if obj == nil {
		return nil, err
	}
	return obj.(*crv1.CertRequest), err
}
